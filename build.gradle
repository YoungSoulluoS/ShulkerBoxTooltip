plugins {
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'dev.architectury.loom' version '1.7-SNAPSHOT' apply false
    id 'maven-publish'
    id 'signing'
}

architectury {
    minecraft = rootProject.mcVersion
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.mcVersion}"
        mappings loom.officialMojangMappings()
    }

    publishing {
        repositories {
            def ENV = System.getenv()
            if (ENV.MAVEN_USER && ENV.MAVEN_PASS) {
                maven {
                    def repo = projectBaseVersion.contains('SNAPSHOT') ? ENV.MAVEN_SNAPSHOT_REPO : ENV.MAVEN_REPO
                    if (!repo) {
                        println('env variable $MAVEN_REPO (or $MAVEN_SNAPSHOT_REPO) is not defined!')
                        url ""
                    } else {
                        url repo
                    }
                    credentials {
                        username = ENV.MAVEN_USER
                        password = ENV.MAVEN_PASS
                    }
                }
            } else {
                println('properties mavenUser and/or mavenPass are not defined!')
            }
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    group = rootProject.projectGroup
    version = rootProject.projectBaseVersion + '+' + rootProject.mcVersion

    repositories {
        maven {
            name = 'NeoForge'
            url 'https://maven.neoforged.net/releases'
        }
        maven {
            name = 'CurseForge'
            url 'https://minecraft.curseforge.com/api/maven'
        }
        maven {
            name = 'Shedaniel Maven'
            url = 'https://maven.shedaniel.me'
        }
        maven {
            name = 'TerraformersMC'
            url = 'https://maven.terraformersmc.com/releases'
        }
        maven {
            name = 'Cotton'
            url = 'http://server.bbkr.space:8081/artifactory/libs-release'
            allowInsecureProtocol = true
        }
        mavenLocal()
        mavenCentral()
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 21
    }

    java {
        withSourcesJar()
    }
}

// Gradle Build Scan Publishing
if (hasProperty('buildScan') && System.getenv('GRADLE_TOS_AGREE')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = System.getenv('GRADLE_TOS_AGREE')
    }
}

// common publishing POM configuration
ext.makePom = { Project project ->
    { MavenPom pom ->
        pom.name = project.pomName
        pom.description = project.description
        pom.url = "https://github.com/${project.gitLink}"

        pom.developers {
            developer {
                id = 'misterpemodder'
                name = 'Yanis Guaye'
                email = 'yguaye44@gmail.com'
            }
        }

        pom.licenses {
            license {
                name = 'MIT License'
                url = 'https://opensource.org/licenses/MIT'
                distribution = 'repo'
            }
        }

        pom.scm {
            url = "https://github.com/${project.gitLink}"
            connection = "scm:git:git@github.com:${project.gitLink}.git"
            developerConnection = "scm:git:git@github.com:${project.gitLink}.git"
        }
    }
}

ext.getReleaseType = { ->
    if (project.projectBaseVersion.contains('alpha'))
        return 'alpha'
    else if (project.projectBaseVersion.contains('beta'))
        return 'beta'
    return 'release'
}

ext.parseChangelog = { String path ->
    def file = new File(path)

    if (!file.exists())
        return '(no changelog)'
    def changelog = ""
    def end = false

    file.eachLine {
        if (end || it == null)
            return
        if (!it.startsWith('==='))
            changelog += "$it\n"
        else
            end = true
    }
    return changelog
}
